#! /usr/bin/python
#
# bmpd - a BGP Monitoring Protocol daemon
#

import sys
import optparse
import logging
import daemon

import psycopg2
from twisted.internet import reactor

from bmp.bmpprotocol import BMPFactory
from bmp import store


if __name__ == '__main__':
    """ GO GO GO!
    """

    # parse arguments
    parser = optparse.OptionParser()
    parser.add_option('-f', '--foreground', dest='foreground',
        action="store_true", default=False, help="Don't daemonize process")
    parser.add_option('-d', '--debug', dest='debug',
        action="store_true", default=False, help="Run process in debug mode")
    parser.add_option('-p', '--port', dest='port', default=20000,
        help='Port to listen to')
    parser.add_option('-w', '--workers', dest='workers', default=1,
        help="Number of worker processes")

    (options, arguments) = parser.parse_args()

    # configure logging
    logging.basicConfig()
    logger = logging.getLogger()
    if options.debug:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)

    logger.info("Starting bmpd")

    # create message storage facility
    store = store.Store(int(options.workers))

    # foreground?
    if options.foreground:
        # start receiver in foreground
        reactor.listenTCP(options.port, BMPFactory(store))
        reactor.run()

    else:
        # start daemonized receiver
        with daemon.DaemonContext():
            reactor.listenTCP(options.port, BMPFactory(store))
            reactor.run()
